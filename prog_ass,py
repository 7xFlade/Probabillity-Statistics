# BERNOULLI RANDOM VARIABLE
# Your code goes here
# Generate 1000 samples of a Bernoulli Random Variable
p = 0.2 # Probability of Success
n = 1   # Number of states (When n = 1, Binomial Random Variable becomes a Bernoulli Random Variable)
size  = 10 # Number of trials
X = np.random.binomial(n,p,size=size)
plt.title("Bernoulli Random Variable (p=0.2)")
plt.hist(X,bins='auto')
plt.show()

p = 0.8 # Probability of Success
n = 1   # Number of states (When n = 1, Binomial Random Variable becomes a Bernoulli Random Variable)
size  = 10000000 # Number of trials
X = np.random.binomial(n,p,size=size)
plt.title("Bernoulli Random Variable (p=0.8)")
plt.hist(X,bins='auto')
plt.show()

# BINOMIAL RANDOM VARIABLE
# Your code goes here
# Generate 1000 samples of a Binomial Random Variable
p = 0.2 # Probability of a single success
n = 10  # Number of states
size  = 100 # Number of trials
X = np.random.binomial(n,p,size=size)
plt.title("Binomial Random Variable (n=100, p=0.2)")
plt.hist(X,bins="auto");
plt.show()

p = 0.7 # Probability of a single success
n = 10000  # Number of states
size  = 10000000 # Number of trials
X = np.random.binomial(n,p,size=size)
plt.title("Binomial Random Variable (n=10000, p=0.7)")
plt.hist(X,bins="auto");
plt.show()

# GEOMETRIC RANDOM VARIABLE
# Your code goes here
# Generate 1000 samples of a Geometric Random variables
p = 0.9
size = 10
plt.title("Geometric Random Variable (p = 0.9)")
X = np.random.geometric(p,size=size)
plt.hist(X,bins="auto")
plt.show()

p = 0.1
size = 1000000
plt.title("Geometric Random Variable (p = 0.1)")
X = np.random.geometric(p,size=size)
plt.hist(X,bins="auto")
plt.show()

# POISSON RANDOM VARIABLE
# Your code goes here
# Generate 5000 samples of a Poisson Random Variable
lambd = 1
X = np.random.poisson(lambd,size=5000)
plt.title("Poisson Random Variable (lambda = 1)")
plt.hist(X,bins="auto")
plt.show()

lambd = 6
X = np.random.poisson(lambd,size=5000)
plt.title("Poisson Random Variable (lambda = 1)")
plt.hist(X,bins="auto")
plt.show()

odi_data_df = pd.read_csv('ODIData.csv')
number_of_maiden_overs = np.array((odi_data_df['Mdns']))
over_bins = np.arange(102)

(bin_values_historical_data, bins, patches) = plt.hist(number_of_maiden_overs, bins=over_bins, rwidth = 0.5, density=True, align='left')
plt.title('Histogram of Maiden Overs in ODIs played in 21st Century')
plt.show()

# Generate 4000 samples of a Uniform Random Variable with a = 1, b = 10.
a = 1 # parameter a of uniform RV
b = 10  # parameter b of uniform RV
size  = 4000 # Number of trials
X = np.random.randint(low=a,high=b+1, size=size)
plt.title("Uniform Random Variable (a=1, b=10)")
(bin_values_pmf_data, bins, patches) = plt.hist(X,bins=over_bins, rwidth = 0.5, density=True, align='left' );
plt.show()

difference_in_bin_values = bin_values_historical_data - bin_values_pmf_data
error = np.sum(abs(difference_in_bin_values))
print("Error when the Proposed PMF is Unifrom with parameter a=1 and b=10: " + str(error))

# Mathematical Model of Number of Maiden Overs in an ODI Cricket Match
# Your code goes here

odi_data_df = pd.read_csv('ODIData.csv')
number_of_maiden_overs = np.array((odi_data_df['Mdns']))
over_bins = np.arange(102)

(bin_values_historical_data, bins, patches) = plt.hist(number_of_maiden_overs, bins=over_bins, rwidth = 0.5, density=True, align='left')
plt.title('Histogram of Maiden Overs in ODIs played in 21st Century')
plt.show()

# Generate 4000 samples of a Uniform Random Variable with a = 1, b = 10.
lambd = 4
X = np.random.poisson(lambd,size=4000)
plt.title("Poisson Random Variable (lambda=4)")
(bin_values_pmf_data, bins, patches) = plt.hist(X,bins=over_bins, rwidth = 0.5, density=True, align='left' );
plt.show()

difference_in_bin_values = bin_values_historical_data - bin_values_pmf_data
error = np.sum(abs(difference_in_bin_values))
print("Error when the Proposed PMF is Unifrom with lambda = 4 : " + str(error))

